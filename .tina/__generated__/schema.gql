# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  event(relativePath: String): Event!
  eventConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: EventFilter): EventConnection!
}

input DocumentFilter {
  event: EventFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Event | Folder

type Event implements Node & Document {
  eventName: String!
  eventDescription: String
  website: String
  location: String
  venueName: String
  venueMapsLink: String
  venueAddress: String
  startDate: String
  endDate: String
  dateTBD: Boolean
  dri: String
  eventTopic: [String]
  eventHosts: [String]
  preferredContacts: [String]
  isFeaturedEvent: Boolean
  eventType: String
  tag: String
  juanSpeaking: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input EventFilter {
  eventName: StringFilter
  eventDescription: StringFilter
  website: StringFilter
  location: StringFilter
  venueName: StringFilter
  venueMapsLink: StringFilter
  venueAddress: StringFilter
  startDate: DatetimeFilter
  endDate: DatetimeFilter
  dateTBD: BooleanFilter
  dri: StringFilter
  eventTopic: StringFilter
  eventHosts: StringFilter
  preferredContacts: StringFilter
  isFeaturedEvent: BooleanFilter
  eventType: StringFilter
  tag: StringFilter
  juanSpeaking: StringFilter
}

type EventConnectionEdges {
  cursor: String!
  node: Event
}

type EventConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [EventConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateEvent(relativePath: String!, params: EventMutation!): Event!
  createEvent(relativePath: String!, params: EventMutation!): Event!
}

input DocumentUpdateMutation {
  event: EventMutation
  relativePath: String
}

input DocumentMutation {
  event: EventMutation
}

input EventMutation {
  eventName: String
  eventDescription: String
  website: String
  location: String
  venueName: String
  venueMapsLink: String
  venueAddress: String
  startDate: String
  endDate: String
  dateTBD: Boolean
  dri: String
  eventTopic: [String]
  eventHosts: [String]
  preferredContacts: [String]
  isFeaturedEvent: Boolean
  eventType: String
  tag: String
  juanSpeaking: String
}

schema {
  query: Query
  mutation: Mutation
}
